#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass dlrreport
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Zusammenfassung
\end_layout

\begin_layout Standard
Ziel dieser Arbeit war es, ein industriell einsetzbares und erweiterbares
 Multifidelity-Optimierungsverfahren unter Berücksichtigung der Anforderungen
 im Bereich der Turbomaschinenauslegung zu entwickeln und zu testen.
 Die Herausforderungen bei der Optimierung von Turbomaschinen sind die Existenz
 mehrerer Zielfunktionen und zahlreicher Nebenbedingungen sowie hochdimensionale
 Suchräume und sehr laufzeitintensive Prozessketten, welche nicht immer
 Ergebnisse liefern.
 Das hier vorgestellte Multifidelity-Optimierungsverfahren sorgt dafür,
 dass hochdimensionale Suchräume effizienter abgetastet werden können und
 damit die Laufzeit der Optimierungen deutlich reduziert wird bzw.
 deutlich robustere und zuverlässigere Aussagen zu deren Ergebnissen erlauben.
 Hierfür werden schnelle Prozessketten niedrigerer Güte herangezogen und
 mit Hilfe der dort enthaltenen Informationen die notwendige Anzahl an teuren
 Prozesskettenauswertungen minimiert.
 Die Anforderungen an das Multifidelity-Optimierungsverfahren umfassen die
 folgenden Punkte (vgl.
 Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Anforderungen-und-Zielsetzung"

\end_inset

):
\end_layout

\begin_layout Enumerate
Entwicklung eines CO-Kriging-Ersatzmodells
\end_layout

\begin_layout Enumerate
Erweiterung des bisherigen Optimierungsverfahrens
\end_layout

\begin_layout Enumerate
Testen des entwickelten Verfahrens 
\end_layout

\begin_layout Enumerate
Nachweis der praktischen Anwendbarkeit an einer industriellen Turbomaschinenopti
mierung
\end_layout

\begin_layout Paragraph
Entwicklung eines CO-Kriging-Ersatzmodells:
\end_layout

\begin_layout Standard
Ein Kernpunkt dieser Arbeit war die Entwicklung eines Co-Kriging-Ersatzmodells.
 Erst auf dessen Basis ist eine Multifidelity-Strategie effizient umsetzbar.
 Die theoretischen Hintergründe werden in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Die-Kriging-Verfahren"

\end_inset

 hergeleitet.
 Eine Besonderheit des hier entwickelten Verfahrens ist die Möglichkeit
 die Punkte der verschiedenen Gütestufen frei im Suchraum verteilen zu können
 (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:VergleicheCoKrigingAndere"

\end_inset

) - wiederum eine wichtige Voraussetzung für die anvisierten Anwendungen
 des verbesserten Optimierungsverfahrens.
 
\end_layout

\begin_layout Standard
Die praktische Anwendung in Forschung und Industrie erfordert eine klare
 und vor allem erweiterbare Softwarestruktur.
 Dafür wurde eine moderne objektorientierte interfacebasierte Programmierung
 in der Programmiersprache C++ gewählt.
 Diese Art der Softwarearchitektur ermöglicht die effiziente Implementierung
 unterschiedlicher Verfahren, wie z.B.
 Ordinary-, Gradient-Enhanced-, Co-Kriging und Klassifikatoren, wie z.B.
 Supporting-Vector-Machines innerhalb eines Programms.
 Viele Softwaremodule können geteilt und so Redundanzen vermieden werden,
 die Übersichtlichkeit wird erhöht und die Fehleranfälligkeit reduziert.
 Beispielsweise wird dadurch ein Netzwerkaustausch von vollständigen Objekten
 ermöglicht, es werden mehrere Minimierungsverfahren allgemein nutzbar gemacht
 und eine Matrix-Klasse bereitgestellt, welche unterschiedlichste Architekturen
 (GPUs, Intel(c) MKL, OpenMP) unterstützt.
\end_layout

\begin_layout Standard
Innerhalb einer Optimierung müssen die Ersatzmodelle einen höheren Zeitgewinn
 bringen als die Nutzung selbst erfordert.
 Die hier entwickelten Ersatzmodelle sind in der Lage, viele moderne Hardwarebes
chleunigungen zu nutzen.
 Besonders erwähnt seien hier Advanced-Vector-Extensions (siehe Kapitel
 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Streaming-SIMD-Extensions"

\end_inset

), GPU-Beschleunigung (siehe 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Verwendung-von-GPGPU"

\end_inset

) und OpenMP-Parallelisierung auf Thread-Ebene (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Matrixoperationen"

\end_inset

).
 
\end_layout

\begin_layout Standard
Weiterhin wurden Maßnahmen innerhalb des Verfahrens zur Beschleunigung des
 Trainings umgesetzt.
 Hierzu zählen: 
\end_layout

\begin_layout Itemize
Unterschiedliche Initialisierungsmethoden des Trainingsverfahrens (siehe
 Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Initialisierung-der-Hyperparamet"

\end_inset

)
\end_layout

\begin_layout Itemize
Ein in dieser Arbeit entwickeltes RPROP-Trainingsverfahren, angepasst an
 das Co-Kriging (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Minimierungsverfahren"

\end_inset

)
\end_layout

\begin_layout Itemize
Die in dieser Arbeit entwickelte Matrix-Klasse mit zahlreichen Beschleunigungsve
rfahren und der Möglichkeit, verschiedene Architekturen zu nutzen (siehe
 Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Matrixoperationen"

\end_inset

) 
\end_layout

\begin_layout Itemize
Eine effiziente Umsetzung der Kovarianzfunktionen (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:SoftwaretechnKorrelationsfunktionen"

\end_inset

)
\end_layout

\begin_layout Itemize
Die automatisierte Reduktion von Stützstellen (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Reduktion-von-Stützstellen"

\end_inset

) auf Basis eines Kriging-Modells
\end_layout

\begin_layout Itemize
Verschiedene Methoden zur effizienten Berechnung des Likelihood-Terms und
 dessen Ableitungen (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Ableitung-LikelihoodRueckMode"

\end_inset

 und 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:SpurApprox"

\end_inset

)
\end_layout

\begin_layout Standard
Darüberhinaus wurde eine unabhängige Softwarebibliothek entwickelt, welche
 die asynchrone Verteilung verschiedener Operationen auf mehrere Rechner
 erlaubt (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Verteiltes-Rechnen-1"

\end_inset

).
 Mit dieser Bibliothek konnten die wesentlichen Matrix-Operationen parallelisier
t werden.
 Das System ist vollständig asynchron und ermöglicht es auch, die Aufgaben
 auf unterschiedliche Architekturen zu verteilen, bspw.
 Server mit GPUs und CPUs oder auch verschieden starke Server im Mischbetrieb
 zu verwenden.
 Die dafür nötige Lastverteilung übernimmt ein Scheduler.
 Zudem kann das System Ausfälle einzelner Server kompensieren und die Aufgaben
 zeitnah an andere Server verteilen.
 Dies ist ein erheblicher Vorteil gegenüber den meisten MPI-basierten Systemen.
 
\end_layout

\begin_layout Paragraph
Erweiterung des bisherigen Optimierungsverfahrens:
\end_layout

\begin_layout Standard
Parallel zur Entwicklung des Ersatzmodells erfolgte die Erarbeitung entsprechend
er Optimierungstrategien und deren Integration in eine bestehende Optimierungsum
gebung.
 Hier handelt es sich um die DLR-Optimierungssuite AutoOpti.
 Deren Aufbau sowie die hier beschriebenen Entwicklungen und Anwendungen
 sichern die vollständige Verallgemeinerungsfähigkeit der im Rahmen dieser
 Arbeit erzielten Ergebnisse.
 Eine neue Schnittstelle in AutoOpti gestattet die Anbindung und Nutzung
 unterschiedlicher Ersatzmodelle (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Softwarearchitektur-und-Laufzeit"

\end_inset

).
 Selbstverständlich musste auch die Datenbankhaltung und Prozesskettensteuerung
 in AutoOpti auf mehrere Gütestufen erweitert werden.
 
\end_layout

\begin_layout Standard
Eine automatisierte Entscheidungsfunktion (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Entscheidungsfunktion"

\end_inset

) trifft während der Laufzeit einer Optimierung die Entscheidung, welche
 Gütestufe als nächstes berechnet werden soll.
 Die Entscheidung wird dabei so getroffen, dass diese den Optimierungsverlauf
 möglichst günstig beeinflusst.
 Hierfür werden Prozesskettenlaufzeiten, Trainings- und Optimierungszeiten,
 der lokale Informationsgehalt der Gütestufen und die Gewichtung der unterschied
lichen Nebenbedingungen mit einbezogen.
 Die durchgeführten Validierungen und die ersten Anwendungen zeigen eine
 Leistungsfähigkeit und Robustheit, wie sie bisher in der Literatur nicht
 gefunden wurde.
 
\end_layout

\begin_layout Paragraph*
Testen des entwickelten Verfahrens:
\end_layout

\begin_layout Standard
Das Hauptziel dieser Arbeit war es, ein in Industrie- und Forschungsumgebung
 nutzbares Multifidelity-Verfahren zu entwickeln.
 Begonnen wurde mit einfachen akademischen Testfällen, bei denen neben der
 prinzipiellen Arbeitsfähigkeit der Umgang mit 
\begin_inset Quotes gld
\end_inset

Grenzfällen
\begin_inset Quotes grd
\end_inset

 getestet wurde.
 Erste praktische Anwendungen im Turbomaschinenbereich dienten der Überprüfung
 der laufenden Forschungs- und Entwicklungsarbeiten und der Weiterentwicklung
 des Verfahrens.
 Die in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:CRISP-Testfall"

\end_inset

 beschriebene aeromechanische Optimierungsreihe einer modernen Fanstufe
 zeigt den Geschwindigkeitsvorteil des hier entwickelten Multifidelity-Verfahren
s gegenüber einer konventionellen Singlefidelity-Optimierung.
 Hierfür wurden die Optimierungen mehrfach wiederholt, um Zufälligkeiten
 abzubilden und die Robustheit des Verfahrens messen zu können.
 Neben der Beschleunigung konnte beobachtet werden, dass die Multifidelity-Optim
ierungen alle zu demselben guten Ergebnis führten, während die Singlefidelity-Op
timierungen stärkere Schwankungen zeigten.
 
\end_layout

\begin_layout Paragraph*
Nachweis der praktischen Anwendbarkeit an industriellen Turbomaschinenoptimierun
gen:
\end_layout

\begin_layout Standard
Die in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Übersicht-der-bisherigen"

\end_inset

 beschriebenen Anwendungen zeigen die angestrebte praktische Anwendungsbereitsch
aft der hier erarbeiteten Ergebnisse.
 Sie zeigen aber auch, dass eine erfolgreiche Anwendung kein 
\begin_inset Quotes gld
\end_inset

push-Button
\begin_inset Quotes grd
\end_inset

-Prozess ist.
 Das Aufsetzen, die Beobachtung und Steuerung einer solchen Optimierung
 erfordert eine hohe Aufmerksamkeit des Anwenders.
 Bei der in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Design-of-a"

\end_inset

 beschriebenen Anwendung konnte aber auch beobachtet werden, dass mit einer
 reinen Single-Fidelity-Strategie kein Ergebnis erzielt werden konnte, welches
 alle Nebenbedingungen und Auslegungsziele erfüllt.
 
\end_layout

\begin_layout Paragraph
Aktuelle Entwicklungen:
\end_layout

\begin_layout Standard
Auch nach Fertigstellung der vorliegenden Arbeit werden die hier entwickelten
 Methoden weiter verbessert und deren Anwendungsbereiche erweitert.
 Bereits zum jetzigen Zeitpunkt sind einige dieser Entwicklungen besonders
 aussichtsreich.
 Insbesondere die Nutzung des Co-Kriging-Modells außerhalb der reinen Multifidel
ity-Optimierungen ist ein neues Feld und ermöglicht vielversprechende Ansätze,
 wie z.B.
 die Wiederverwendung älterer Optimierungen.
 Eine typische Problemstellung in der Entwicklung von Turbomaschinen sind
 bspw.
 geänderte aerodynamische Randbedingungen oder eine geänderte Parametrisierung
 während eines Auslegungszyklus.
 Dies kann unter anderem dazu führen, dass komplette Optimierungen aufgrund
 kleinerer Veränderungen neu gestartet werden müssen, ohne dass die alten
 Daten verwendet werden können.
 Mithilfe des Co-Krigings können die Daten von älteren Optimierungen als
 niedrige Güte in einer neuen Optimierung weiterverwendet werden.
 Je nach Ähnlichkeit der Optimierungen kann der Zugewinn dabei sehr groß
 sein.
 Die Wahrscheinlichkeit einer Beschleunigung ist hoch, da die Daten bereits
 vorhanden sind.
 
\end_layout

\begin_layout Standard
Eine weitere potentielle Nutzung des Co-Kriging-Modells ist die Kopplung
 von komplexen, nicht statistischen Ersatzmodellen zur Verbesserung der
 Vorhersagegenauigkeit.
 Hier sind insbesondere Deep-Learning-Verfahren zu nennen.
 Dabei handelt es sich um neuronale Netzwerke mit einem komplexen Aufbau
 und einer hohen Anzahl an Zwischenschichten.
 Mithilfe dieser neuronalen Netzwerke sollen komplette 3D-Strömungslösungen
 gelernt, verallgemeinert und damit Vorhersagen getroffen werden.
 Ein großer Vorteil liegt dabei in der Unabhängigkeit der Vorhersagen von
 den freien Optimierungsparametern.
 Dies ist möglich, da die neuronalen Netzwerke die gesamte 3D-Geometrie
 als Input verwenden.
 Erste Arbeiten zu diesem Thema sind in 
\begin_inset CommandInset citation
LatexCommand cite
key "aulich2019"

\end_inset

 zu finden.
 Diese tiefen neuronalen Netzwerke bieten bisher noch keine Unsicherheitsvorhers
age an, sodass ein 
\begin_inset Quotes gld
\end_inset

Expected-Volume-Gain
\begin_inset Quotes grd
\end_inset

-Algorithmus (siehe Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:EVG"

\end_inset

) nicht anwendbar ist.
  Eine mögliche Lösung hierfür bietet die Nutzung eines Co-Krigings.
 Die Vorhersagen des neuronalen Netzwerks könnten als niedrige Gütestufe
 verwendet werden und die Kriging-Vorhersagen damit verbessern.
 Diese Entwicklung befindet sich allerdings noch in einem sehr frühen Entwicklun
gsstadium.
\end_layout

\begin_layout Standard
Zukünftig wird die in Kapitel 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Verteiltes-Rechnen-1"

\end_inset

 beschriebene Netzwerkbibliothek weiterentwickelt.
 Hier liegt das Ziel darin, die Bibliothek so zu erweitern, dass freie Rechnerka
pazitäten für größere Anwendungen automatisch genutzt werden können; zuerst
 innerhalb eines internen Netzwerkes und langfristig auf das Internet ausgedehnt
, in Anlehnung an das SETI@home Programm (siehe 
\begin_inset CommandInset citation
LatexCommand cite
key "korpela2001seti"

\end_inset

).
 
\end_layout

\begin_layout Standard
Eine anwendungsbereite Multifidelity-Optimierungsstrategie wurde erarbeitet
 und deren praktische Anwendbarkeit gezeigt.
 Die dafür notwendigen Entwicklungen, insbesondere ein Co-Kriging-Ersatzmodell,
 eine automatisierte Entscheidungsfunktion sowie die für die robuste und
 zuverlässige Anwendung notwendigen softwaretechnischen Entwicklungen wurden
 realisiert.
 Mit diesen Ergebnissen ist eine effiziente Optimierung bei typischen Turbomasch
inenauslegungen möglich.
\end_layout

\end_body
\end_document
